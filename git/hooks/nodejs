#!/usr/bin/env ruby
require 'pathname'
require 'socket'
require 'json'

class Builder

  def run
    time_elapsed do
      setup_config
      setup_git do
        set_use_cache
        reuse_vendor do
          checkout
        end
      end
      change_workdir do
        setup_path
        install_vendor
        compile_assets
        restart_server
      end
    end
  end

  def time_elapsed
    time = Time.now
    yield
    min, sec = (Time.now.to_f - time.to_f).divmod(60.0)
    puts('Time used: %3d:%04.2f' % [min.to_i, sec])
  end

  def setup_config
    @home = Pathname.new(ENV['HOME'])
    @pwd = Pathname.new(Dir.pwd).dirname
    @env = (@home + 'env').readlines
    @name = @pwd.basename
    @gitdir  = @pwd + 'git'
    @workdir = @pwd + 'repo'
    @vendor_src = @workdir + 'node_modules'
    @vendor_dst = @pwd + 'node_modules'
    @vendor_pivot = 'package.ls'
    @vendor_assets_pivot = 'bower.ls'
  end

  def setup_git
    ENV['GIT_DIR']       = (@gitdir).to_s
    ENV['GIT_WORK_TREE'] = (@workdir).to_s
    yield
    ENV.delete['GIT_DIR']
    ENV.delete['GIT_WORK_TREE']
  end

  def set_use_cache
    @use_vendor_cache        = use_cache?(@vendor_pivot)
    @use_vendor_assets_cache = use_cache?(@vendor_assets_pivot)
  end

  def use_cache?(pivot)
    use_cache = false
    if (`git branch`.size > 0 &&
        `git ls-tree HEAD --name-only`[/^#{pivot}$/] &&
        (pivot_path = @workdir + pivot).exist?)
      old = File.read(pivot_path)
      `git checkout HEAD #{pivot}`
      new = File.read(pivot_path)
      use_cache = old == new
    end
    use_cache
  end

  def reuse_vendor
    if @vendor_src.exist?
      `mv #{@vendor_src} #{@vendor_dst}`
      yield
      `mv #{@vendor_dst} #{@vendor_src}`
    else
      yield
    end
  end

  def checkout
    `git clean -fd`
    `git checkout HEAD -f`
  end

  def change_workdir
    Dir.chdir(@workdir) do
      yield
    end
  end

  def setup_path
    ENV['PATH'] = find_env('PATH')
  end

  def find_env(key)
    @env.find { |l| l.start_with?("#{key}=") }
    .sub(/^#{key}=/, '').sub(/\n\Z/, '')
  end

  def install_vendor
    if @use_vendor_cache
      puts 'Use vendor cache'
    else
      system("lsc #{@vendor_pivot}")
      system("lsc #{@vendor_assets_pivot}")
      system('npm install --production -q')
      system('npm prune')
    end
  end

  def compile_assets
    if @use_vendor_assets_cache
      puts 'Use vendor assets cache'
    else
      system('npm run assets:precompile:vendor')
    end
    system('npm run assets:precompile:app')
  end

  EXEC_KILL = [0].pack(?N)
  EXEC_RUN  = [1].pack(?N)
  EXEC_EXIT = [2].pack(?N)

  def restart_server
    port = File.read(@home + 'observer_port' + @name).to_i
    socket = TCPSocket.new("repo_#{@name.to_s}", port)
    socket.write(EXEC_KILL)
    print socket.gets
    socket.write(EXEC_RUN)
    print socket.gets
    socket.write(EXEC_EXIT)
  end
end

Builder.new.run
